library("shiny")
library("FactoMineR")
library("factoextra")
library("som")
library("psych")
library("data.table")
library("ape")
library("corrplot")
library("limma")
library('EDASeq')
normalize_data <- function(DF){
data.norm <- som::normalize(DF, byrow=TRUE)
data.norm <- na.omit(data.norm)
}
filtering_data <- function(DF1, DF2){
data_new = na.omit(DF2)
data_new= data_new[,-1]
final_data_new=data_new[,grepl(paste0(DF1$samples, collapse = "|"), names(data_new))]
filt_data_new <- final_data_new[match(as.character(DF1$samples), names(final_data_new))]
}
tpmfiltering_data <- function(DF1, DF2){
data_new = na.omit(DF2)
data_new= data_new[,-1]
final_data_new=data_new[,grepl(paste0(DF1$samples, collapse = "|"), names(data_new))]
filt_data_new <- final_data_new[match(as.character(DF1$samples), names(final_data_new))]
}
SumMarize<- function(DF){
sm <- as.data.frame(describe(DF, ranges=TRUE, fast = FALSE))
sm=setDT(sm, keep.rownames = T)[]
sm= sm[,-c(2,6,7,13)]
addsum= data.frame(colSums(DF))
addsum_zero= data.frame(colSums(DF>0))
newsm= cbind(sm,addsum, addsum_zero)
colnames(newsm) <- c("Samples", "Detected Genes", "Mean", "SD", "Median", "Min", "Max", "Range", "Skew", "Kurtosis", "Library Size", "Expressed Genes")
write.table(newsm, file="Summary.Statistics.sample.txt", sep='\t', row.names=F)
}
distributionplot <- function(DF){
pdf("Counts_distribution.pdf", height = 5, width = 6)
par(mar=c(5,10,4,1))
boxplot(log2(DF + 1), pch=".", horizontal=TRUE, cex.axis=0.9, main= "Distribution of counts per sample", las=1, xlab="log2(counts +1)", col="red")
dev.off()
}
transcriptplot <- function(DF){
geneRpm = t(t(DF[,-1]) * 1e6 / colSums(DF[,-1]))
geneRpm = round(geneRpm, 3)
pdf("MappedReadDensity_distribution.pdf", height = 5, width = 6)
par(mar=c(4,4,4,1))
plotDensities(log2(geneRpm + 0.01), legend = "topright", main = "Mapped Reads density per sample", col=rainbow(length(unique(DF))))
dev.off()
}
tpmfunction <- function(counts,length) {
x <- counts/length
return(t(t(x)*1e6/colSums(x, na.rm=T)))
}
phylo_plot <- function(DF3, fontsize){
plot(as.phylo(hclust(dist(scale(t(DF3)), method="euclidean"))), type="unrooted", main = "Hierarchichal relationship between samples", cex=fontsize)
}
library("shiny")
library("FactoMineR")
library("factoextra")
library("som")
library("psych")
library("data.table")
library("ape")
library("corrplot")
library("limma")
library('EDASeq')
normalize_data <- function(DF){
data.norm <- som::normalize(DF, byrow=TRUE)
data.norm <- na.omit(data.norm)
}
filtering_data <- function(DF1, DF2){
data_new = na.omit(DF2)
data_new= data_new[,-1]
final_data_new=data_new[,grepl(paste0(DF1$samples, collapse = "|"), names(data_new))]
filt_data_new <- final_data_new[match(as.character(DF1$samples), names(final_data_new))]
}
tpmfiltering_data <- function(DF1, DF2){
data_new = na.omit(DF2)
data_new= data_new[,-1]
final_data_new=data_new[,grepl(paste0(DF1$samples, collapse = "|"), names(data_new))]
filt_data_new <- final_data_new[match(as.character(DF1$samples), names(final_data_new))]
}
SumMarize<- function(DF){
sm <- as.data.frame(describe(DF, ranges=TRUE, fast = FALSE))
sm=setDT(sm, keep.rownames = T)[]
sm= sm[,-c(2,6,7,13)]
addsum= data.frame(colSums(DF))
addsum_zero= data.frame(colSums(DF>0))
newsm= cbind(sm,addsum, addsum_zero)
colnames(newsm) <- c("Samples", "Detected Genes", "Mean", "SD", "Median", "Min", "Max", "Range", "Skew", "Kurtosis", "Library Size", "Expressed Genes")
write.table(newsm, file="Summary.Statistics.sample.txt", sep='\t', row.names=F)
}
distributionplot <- function(DF){
pdf("Counts_distribution.pdf", height = 5, width = 6)
par(mar=c(5,10,4,1))
boxplot(log2(DF + 1), pch=".", horizontal=TRUE, cex.axis=0.9, main= "Distribution of counts per sample", las=1, xlab="log2(counts +1)", col="red")
dev.off()
}
transcriptplot <- function(DF){
geneRpm = t(t(DF[,-1]) * 1e6 / colSums(DF[,-1]))
geneRpm = round(geneRpm, 3)
pdf("MappedReadDensity_distribution.pdf", height = 5, width = 6)
par(mar=c(4,4,4,1))
plotDensities(log2(geneRpm + 0.01), legend = "topright", main = "Mapped Reads density per sample", col=rainbow(length(unique(DF))))
dev.off()
}
tpmfunction <- function(counts,length) {
x <- counts/length
return(t(t(x)*1e6/colSums(x, na.rm=T)))
}
phylo_plot <- function(DF3, fontsize){
plot(as.phylo(hclust(dist(scale(t(DF3)), method="euclidean"))), type="unrooted", main = "Hierarchichal relationship between samples", cex=fontsize)
}
manifest_file <- read.delim('~/Documents/projects/research/iSeqQC/Revision_1/analysis/Feldmanetal/samplemanifest_HUMAN_rnaseq.txt', sep="\t", header=TRUE, check.names = F)
View(manifest_file)
manifest_file <- manifest_file[manifest_file$include,]
counts_file <- read.delim('~/Documents/projects/research/iSeqQC/Revision_1/analysis/Feldmanetal/iseqQC_countsfile.txt', sep="\t", header=TRUE, check.names = F)
# Multi-factor PCA
filt_data_new <- filtering_data(manifest_file, counts_file)
data.norm <- normalize_data(filt_data_new)
data.final <- as.matrix(data.norm)
colnames(data.final) <- manifest_file$shortnames
head(data.final)
tran_data.final <- t(data.final)
final.tran_data.final <- as.data.frame(cbind(as.numeric(manifest_file[,5]),librarysize))
librarysize <- colSums(filt_data_new)
final.tran_data.final <- as.data.frame(cbind(as.numeric(manifest_file[,5]),librarysize))
MFA_respca <- MFA(final.tran_data.final, group = c(1,1), type = c('s','s'), name.group = c(names(manifest_file[5]),"Lib.Size"), graph = F)
respca <- fviz_mfa_var(MFA_respca, "group", labelsize= 3, pointsize= 4, title= "Multifactor Principal Component Variances")+ theme(text = element_text(size = 14))
plot(respca)
# Multi-factor PCA
filt_data_new <- filtering_data(manifest_file, counts_file)
data.norm <- normalize_data(filt_data_new)
data.final <- as.matrix(data.norm)
colnames(data.final) <- manifest_file$shortnames
librarysize <- colSums(filt_data_new)
final.tran_data.final <- as.data.frame(cbind(as.numeric(manifest_file[,5]),librarysize))
MFA_respca <- MFA(final.tran_data.final, group = c(1,1), type = c('s','s'), name.group = c(names(manifest_file[5]),"Lib.Size"), graph = F)
respca <- fviz_mfa_var(MFA_respca, "group", labelsize= 3, pointsize= 4, title= "Multifactor Principal Component Variances")+ theme(text = element_text(size = 14))
pdf("MultifactorPCA_plot.pdf", height = 5, width = 6)
plot(respca)
dev.off()
# Multi-factor PCA
filt_data_new <- filtering_data(manifest_file, counts_file)
> manifest_file <- read.delim('~/Documents/projects/research/iSeqQC/Revision_1/analysis/Feldmanetal/samplemanifest_HUMAN_rnaseq.txt', sep="\t", header=TRUE, check.names = F)
> View(manifest_file)
> manifest_file <- manifest_file[manifest_file$include,]
> counts_file <- read.delim('~/Documents/projects/research/iSeqQC/Revision_1/analysis/Feldmanetal/iseqQC_countsfile.txt', sep="\t", header=TRUE, check.names = F)
manifest_file <- read.delim('~/Documents/projects/research/iSeqQC/Revision_1/analysis/Feldmanetal/samplemanifest_HUMAN_rnaseq.txt', sep="\t", header=TRUE, check.names = F)
manifest_file <- manifest_file[manifest_file$include,]
counts_file <- read.delim('~/Documents/projects/research/iSeqQC/Revision_1/analysis/Feldmanetal/iseqQC_countsfile.txt', sep="\t", header=TRUE, check.names = F)
# Multi-factor PCA
filt_data_new <- filtering_data(manifest_file, counts_file)
normalize_data <- function(DF){
data.norm <- som::normalize(DF, byrow=TRUE)
data.norm <- na.omit(data.norm)
}
filtering_data <- function(DF1, DF2){
data_new = na.omit(DF2)
data_new= data_new[,-1]
final_data_new=data_new[,grepl(paste0(DF1$samples, collapse = "|"), names(data_new))]
filt_data_new <- final_data_new[match(as.character(DF1$samples), names(final_data_new))]
}
tpmfiltering_data <- function(DF1, DF2){
data_new = na.omit(DF2)
data_new= data_new[,-1]
final_data_new=data_new[,grepl(paste0(DF1$samples, collapse = "|"), names(data_new))]
filt_data_new <- final_data_new[match(as.character(DF1$samples), names(final_data_new))]
}
SumMarize<- function(DF){
sm <- as.data.frame(describe(DF, ranges=TRUE, fast = FALSE))
sm=setDT(sm, keep.rownames = T)[]
sm= sm[,-c(2,6,7,13)]
addsum= data.frame(colSums(DF))
addsum_zero= data.frame(colSums(DF>0))
newsm= cbind(sm,addsum, addsum_zero)
colnames(newsm) <- c("Samples", "Detected Genes", "Mean", "SD", "Median", "Min", "Max", "Range", "Skew", "Kurtosis", "Library Size", "Expressed Genes")
write.table(newsm, file="Summary.Statistics.sample.txt", sep='\t', row.names=F)
}
distributionplot <- function(DF){
pdf("Counts_distribution.pdf", height = 5, width = 6)
par(mar=c(5,10,4,1))
boxplot(log2(DF + 1), pch=".", horizontal=TRUE, cex.axis=0.9, main= "Distribution of counts per sample", las=1, xlab="log2(counts +1)", col="red")
dev.off()
}
transcriptplot <- function(DF){
geneRpm = t(t(DF[,-1]) * 1e6 / colSums(DF[,-1]))
geneRpm = round(geneRpm, 3)
pdf("MappedReadDensity_distribution.pdf", height = 5, width = 6)
par(mar=c(4,4,4,1))
plotDensities(log2(geneRpm + 0.01), legend = "topright", main = "Mapped Reads density per sample", col=rainbow(length(unique(DF))))
dev.off()
}
tpmfunction <- function(counts,length) {
x <- counts/length
return(t(t(x)*1e6/colSums(x, na.rm=T)))
}
phylo_plot <- function(DF3, fontsize){
plot(as.phylo(hclust(dist(scale(t(DF3)), method="euclidean"))), type="unrooted", main = "Hierarchichal relationship between samples", cex=fontsize)
}
# Multi-factor PCA
filt_data_new <- filtering_data(manifest_file, counts_file)
#data.norm <- normalize_data(filt_data_new)
#data.final <- as.matrix(data.norm)
#colnames(data.final) <- manifest_file$shortnames
librarysize <- colSums(filt_data_new)
final.tran_data.final <- as.data.frame(cbind(as.numeric(manifest_file[,5]),librarysize))
MFA_respca <- MFA(final.tran_data.final, group = c(1,1), type = c('s','s'), name.group = c(names(manifest_file[5]),"Lib.Size"), graph = F)
respca <- fviz_mfa_var(MFA_respca, "group", labelsize= 3, pointsize= 4, title= "Multifactor Principal Component Variances")+ theme(text = element_text(size = 14))
plot(respca)
# Multi-factor PCA
filt_data_new <- filtering_data(manifest_file, counts_file)
data.norm <- normalize_data(filt_data_new)
data.final <- as.matrix(data.norm)
#colnames(data.final) <- manifest_file$shortnames
librarysize <- colSums(data.final)
final.tran_data.final <- as.data.frame(cbind(as.numeric(manifest_file[,5]),librarysize))
MFA_respca <- MFA(final.tran_data.final, group = c(1,1), type = c('s','s'), name.group = c(names(manifest_file[5]),"Lib.Size"), graph = F)
respca <- fviz_mfa_var(MFA_respca, "group", labelsize= 3, pointsize= 4, title= "Multifactor Principal Component Variances")+ theme(text = element_text(size = 14))
plot(respca)
